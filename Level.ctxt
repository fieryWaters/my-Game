#BlueJ class context
comment0.target=Level
comment1.params=a\ b
comment1.target=Level(Polynomial,\ Polynomial)
comment1.text=\r\n\ This\ constructor\ basically\ just\ adds\ the\ two\ polynomials\ to\ peices,\ and\ sets\ the\ bounds\ so\ that\ both\ are\ shown.\r\n
comment10.params=inputX\ globalX
comment10.target=Polynomial\ find(int,\ int)
comment10.text=\r\n\ @param\ inputX\ This\ is\ a\ real\ X\ coordinate\ from\ the\ screen,\ without\ regard\ to\r\n\ any\ shifting\ variables.\r\n\ @param\ globalX\ The\ global\ Shift\ variable\ being\ applied\ to\ the\ level.\r\n\ This\ method\ takes\ an\ input\ and\ the\ shift\ value,\ and\ returns\ the\ polynomial\ that\ is\r\n\ within\ the\ bounds.\ This\ has\ been\ tested\ and\ works\ perfectly.\r\n\ \ \ \ \ \r\n
comment11.params=
comment11.target=Polynomial\ getLast()
comment11.text=\r\n\ @return\ Returns\ the\ Polynomial\ at\ the\ last\ index.\r\n
comment12.params=globalX\ width
comment12.target=void\ refreshBounds(int,\ int)
comment12.text=\r\n\ This\ method\ changes\ the\ bounds\ of\ the\ Polynomial\ so\ only\ polynomials\ that\ are\ within\ the\ bounds\ of\ the\ screen\ are\ displayed.\r\n\ Without\ this\ relatively\ simple\ method\ Level(s)\ with\ a\ large\ number\ of\ peices\ would\ start\ to\ lag/destroy\ your\ computer\ by\ overworking\ it\ unnecessarily.\r\n\ It\ works\ by\ checking\ if\ there\ are\ any\ Polynomials\ that\ should\ be\ on\ the\ screen\ that\ aren't,\ and\ by\ checking\ to\ see\ if\ any\ polynomials\ that\ aren't\ on\ the\ \r\n\ screen\ are\ being\ graphed.\ \r\n\ \r\n\ Note\ that\ leftIndex\ and\ rightIndex\ are\ the\ indices\ of\ the\ Polynomial[]\ at\ the\ left\ and\ right\ bounds.\r\n\ \r\n\ @param\ globalX\ In\ this\ case\ globalX\ refers\ to\ the\ left\ bound\ of\ the\ screen.\r\n\ @param\ width\ globalX+width\ refers\ to\ the\ right\ bounds\ of\ the\ screen.\r\n
comment13.params=p
comment13.target=int\ indexOf(Polynomial)
comment14.params=inputX\ globalX
comment14.target=int\ indexOf(int,\ int)
comment15.params=
comment15.target=Polynomial[]\ toArray()
comment2.params=input
comment2.target=Level(java.io.File)
comment2.text=\r\n\ Creates\ a\ level\ from\ file.\ Presumable\ a\ Level\ has\ been\ created\ using\ the\ drawPanel\ and\ saved\ to\ a\ .txt\ file\ of\ a\ chosen\ name.\ Refer\ to\ DrawPanel.save(String\ fileName)\ for\ more\ info.\r\n\ @param\ input\ This\ is\ the\ .txt\ file\ which\ contains\ the\ key\ information\ about\ a\ Level.\r\n
comment3.params=
comment3.target=void\ scrambleColors()
comment4.params=
comment4.target=int\ length()
comment4.text=\r\n\ @return\ returns\ the\ total\ number\ of\ Polynomials\ in\ this\ Level.\r\n
comment5.params=g\ globalX\ globalY
comment5.target=void\ globalDraw(java.awt.Graphics,\ int,\ int)
comment5.text=\r\n\ \ Draws\ a\ Level\ object\ with\ respect\ to\ a\ global\ shift\ variable.\r\n\ @param\ g\ This\ is\ the\ Graphics\ Object\ that\ is\ being\ used\ to\ draw.\ By\ accepting\ a\ Graphics\ Object\ as\ a\r\n\ parameter\ it\ allows\ the\ drawing\ to\ be\ done\ within\ each\ individual\ class,\ rather\ than\ have\ a\ superfluous\ amount\ of\ code\ in\ the\ driver(s).\r\n\ @param\ globalX\ An\ external\ variable\ that\ is\ used\ to\ shift\ the\ graph,\ potentially\ used\ in\ relation\ to\ a\ moving\ point\ of\ reference.\r\n\ @param\ globalY\ Shifts\ the\ graph\ vertically\ by\ this\ value.\r\n
comment6.params=p
comment6.target=void\ add(Polynomial)
comment6.text=\r\n\ @param\ p\ appends\ p\ onto\ the\ last\ index\ of\ peices.\r\n
comment7.params=p\ intersect
comment7.target=void\ add(Polynomial,\ IntersectCircle)
comment7.text=\r\n\ @param\ p\ appends\ p\ onto\ the\ last\ index\ of\ peices.\r\n
comment8.params=color
comment8.target=void\ setColor(java.awt.Color)
comment8.text=\r\n\ @param\ color\ Changes\ the\ color\ of\ this\ level\ to\ this\ color.\r\n
comment9.params=index
comment9.target=Polynomial\ get(int)
comment9.text=\r\n\ @return\ Returns\ the\ Polynomial\ at\ index.\r\n
numComments=16
